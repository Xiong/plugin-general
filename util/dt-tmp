#!/usr/bin/env perl
#  dt
#  =  Copyright 2013 Xiong Changnian <xiong@cpan.org>   =
#  = Free Software = Artistic License 2.0 = NO WARRANTY =

use 5.016002;   # 5.16.2    # 2012  # __SUB__
use strict;
use warnings;
use version; our $VERSION = qv('v0.0.0');

# Core modules
use lib qw| lib /home/xiong/projects/devel-toolbox/lib |;

# Project moduleS
# Define pool first! 
BEGIN {                         #    $::U or $main::U
    $::U      = {};             # package variable escapes BEGIN block
#~ say 'dt-BEGIN: ', $::U;                                      DEBUG ONLY  #~
    # Make get_global_pool work now.
    use Devel::Toolbox::Core::Pool qw| :main |;
    init_global_pool($::U);
}
use Devel::Toolbox;             # Simple custom project tool management

# Alternate uses
#~ use Devel::Comments '###';                                               #~
#~ use Devel::Comments '###', ({ -file => 'debug.log' });                   #~

## use
#============================================================================#

#~ ### @ARGV

### dt
### $::U

# get options
my $option  = {};               # none for now; no need for Getopt::*
my @words   = @ARGV;            # copy
my $words   = \@words;          # not ref to special global
### @ARGV
### @words
### $words

# This should be done in ::App calling ::Config.            TODO
use File::Spec;                 # Portably perform operations on file names
my $root_path       = File::Spec->rootdir ();
my $orig_path       = File::Spec->catdir (
    $root_path,
    qw| home xiong .config devel-toolbox templates |,
);
my $template        = File::Spec->catfile( $orig_path, 'Module.pm' );
## TODO: config

merge_global_pool({
    cmdline_opt     => $option,  # hashref
    cmdline_words   => $words,   # aryref
});
### $::U

my $perl_exit   = Devel::Toolbox::Core::App::app_execute({});   # 1 for okay
my $shell_exit  = not $perl_exit;
exit $shell_exit;                                               # 0 for okay

__END__

